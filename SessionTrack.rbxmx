<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBXCD9827BBE74F4AADBB98D17CD403D1CB">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">SessionTrack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Folder" referent="RBXA2B88675AB3744D1A363C4DC805A1756">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">Packages</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX95B959D939634B14A7169CC89BFA52D9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Signal</string>
					<string name="ScriptGuid">{07F4BFA2-FDB1-4D89-B96C-237505F2EC2D}</string>
					<ProtectedString name="Source"><![CDATA[local REQUIRED_MODULE = require(script.Parent._Index["sleitnick_signal@2.0.1"]["signal"])
export type Connection = REQUIRED_MODULE.Connection 
export type Signal<T...> = REQUIRED_MODULE.Signal<T...>
return REQUIRED_MODULE
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXE6BDA2880EB744D0979C0E6A854061F0">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Voyager</string>
					<string name="ScriptGuid">{58E76A7F-5FF9-47B3-B155-E14E66280918}</string>
					<ProtectedString name="Source"><![CDATA[local REQUIRED_MODULE = require(script.Parent._Index["blackferrari2_voyager@0.1.0"]["voyager"])
export type RatelimitInformation = REQUIRED_MODULE.RatelimitInformation 
export type RatelimitedInformation = REQUIRED_MODULE.RatelimitedInformation 
export type RequestStatus = REQUIRED_MODULE.RequestStatus 
return REQUIRED_MODULE
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX7E986C63F4E34FBB965C7BBCB69A29B9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">_Index</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Folder" referent="RBXE86185CEA19347C688F62447696461B1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">blackferrari2_voyager@0.1.0</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX03863E4D93364D4398188FBE453F2FAD">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">voyager</string>
							<string name="ScriptGuid">{FF4E7315-9FF0-4BD4-80CC-FB7B810713F2}</string>
							<ProtectedString name="Source"><![CDATA[local Webhook = {}
Webhook.__index = Webhook

local Message = require(script.Message)
local EditedMessage = require(script.EditedMessage)
local ThreadMessage = require(script.ThreadMessage)
local EditedThreadMessage = require(script.EditedThreadMessage)
local OptionalExecuteInfo = require(script.OptionalExecuteInfo)

type RatelimitInfo = {
	XRatelimitLimit : number?,
	XRatelimitRemaining : number?,
	XRatelimitReset : string?,
	XRatelimitResetAfter : number?,
	XRatelimitBucket : string?
}

export type RatelimitInformation = {
	limit : number,
	remaining : number,
	reset : DateTime,
	resetAfter : number, -- In seconds.
	resetAfterSafe : number,
	bucket : string,
}

export type RatelimitedInformation = {
	scope : string,
	retryAfter : number, -- In milliseconds since proxy uses v6 of the Discord API.
	retryAfterSafe : number
}

export type RequestStatus = {
	success : boolean,
	statusCode : number,
	statusMessage : string
}

function Webhook.new(id : string, token : string, customProxyUrl : string?)
	local self = setmetatable({}, Webhook)

	self.id = id
	self.token = token
	self.baseUrl = (customProxyUrl or "https://webhook.lewisakura.moe") .. "/api/webhooks/" .. self.id .. "/" .. self.token
	self.ratelimitInfo = {} :: RatelimitInfo

	return self
end

function Webhook.fromUrl(webhookUrl: string, customProxyUrl : string?)
	local self = setmetatable({}, Webhook)
	local webhookId, webhookToken = string.match(webhookUrl, "^https://discord.com/api/webhooks/(%d+)/([%w%p]+)$")
	
	if (not webhookId) or (not webhookToken) then
		error("Invalid webhook url.")
	end
	
	self.id = webhookId
	self.token = webhookToken
	self.baseUrl = (customProxyUrl or "https://webhook.lewisakura.moe") .. "/api/webhooks/" .. self.id .. "/" .. self.token
	self.ratelimitInfo = {} :: RatelimitInfo

	return self
end

function Webhook:_validateExecuteRequest(content : string?, embeds : {}?, optionalExecuteInfo) : (boolean, string?)
	if (not content or content == "") and (not embeds or #embeds == 0) then
		return false, "one of content, embeds are required." 
	end

	if content then
		if string.len(content) > 2000 then 
			return false, "The content must only contain up to 2000 characters." 
		end 
	end

	if optionalExecuteInfo.usernameOverride then
		local restrictedUsernames = {"everyone", "here"}
		local restrictedSubStrings = {"discord", "clyde", "```"}
		local loweredUsername = optionalExecuteInfo.usernameOverride:lower()

		for _, restrictedUsername in restrictedUsernames do	
			if loweredUsername == restrictedUsername then return false, "Username override is a restricted username. \"" .. restrictedUsername .. "\"" end
		end

		for _, restrictedSubString in restrictedSubStrings do	
			if loweredUsername:match(restrictedSubString) then return false, "Username override contains a restricted substring. \"" .. restrictedSubString .. "\"" end
		end

		if string.len(optionalExecuteInfo.usernameOverride) < 1 or string.len(optionalExecuteInfo.usernameOverride) > 80 then
			return false, "Username override must be between 1 and 80 in length." 
		end
	end

	if optionalExecuteInfo.threadId and optionalExecuteInfo.threadName then
		return false, "threadId and threadName cannot be used together."
	end

	if embeds then
		local totalEmbedCharacters = 0
		
		if #embeds > 10 then 
			return false, "A single message must only have up to 10 embeds." 
		end 

		for _, embed in embeds do
			local isEmbedValid, errorMessage = embed:_validate()
			if not isEmbedValid then return false, errorMessage end
			
			totalEmbedCharacters += embed:totalCharacters()
		end

		if totalEmbedCharacters > 6000 then return false, "The combined sum of characters across all embeds attached to a message must only be up to 6000 characters." end
	end

	return true
end

function Webhook:_validateEditMessageRequest(content : string?, embeds : {}?) : (boolean, string?)
	if content then
		if string.len(content) > 2000 then 
			return false, "The content must only contain up to 2000 characters." 
		end 
	end

	if embeds then
		local totalEmbedCharacters = 0

		for _, embed in embeds do
			local isEmbedValid, errorMessage = embed:_validate()
			if not isEmbedValid then return false, errorMessage end

			totalEmbedCharacters += embed:totalCharacters()
		end

		if totalEmbedCharacters > 6000 then return false, "The combined sum of characters across all embeds attached to a message must only be up to 6000 characters." end
	end

	return true
end

function Webhook:_request(url : string, method : string, body : {}?, contentType : string?) : ({}?, RequestStatus, RatelimitInformation | RatelimitedInformation | {})
	local httpService = game:GetService("HttpService")
	
	local response = httpService:RequestAsync({
		Url = url,
		Method = method,
		Headers = {["Content-Type"] = contentType},
		Body = httpService:JSONEncode(body)
	})
	local responseHeaders : {} = response.Headers
	local decodedBody : {} | nil
	local ratelimitInformation : RatelimitInformation | RatelimitedInformation | {} = {}
	local wasRequestQueued : boolean = false
	
	self.ratelimitInfo = {
		XRatelimitLimit = tonumber(responseHeaders["x-ratelimit-limit"]),
		XRatelimitRemaining = tonumber(responseHeaders["x-ratelimit-remaining"]),
		XRatelimitReset = responseHeaders["x-ratelimit-reset"],
		XRatelimitResetAfter = tonumber(responseHeaders["x-ratelimit-reset-after"]),
		XRatelimitBucket = responseHeaders["x-ratelimit-bucket"]
	}
	
	if response.Body ~= "" then
		decodedBody = httpService:JSONDecode(response.Body)
		wasRequestQueued = decodedBody.proxy
	end
	
	if response.Success and not wasRequestQueued then
		ratelimitInformation = {
			limit = tonumber(responseHeaders["x-ratelimit-limit"]),
			remaining = tonumber(responseHeaders["x-ratelimit-remaining"]),
			reset = DateTime.fromUnixTimestamp(tonumber(responseHeaders["x-ratelimit-reset"])),
			resetAfter = tonumber(responseHeaders["x-ratelimit-reset-after"]), 
			resetAfterSafe = tonumber(responseHeaders["x-ratelimit-reset-after"]) + 1,
			bucket = responseHeaders["x-ratelimit-bucket"]		
		} :: RatelimitInformation
	elseif response.StatusCode == 429 and not wasRequestQueued then	
		if not responseHeaders["via"] then
			-- Cloudflare ratelimit
			
			ratelimitInformation = {
				scope = "global", -- Cloudflare ratelimits count as global.
				retryAfter = tonumber(responseHeaders["retry-after"]),
				retryAfterSafe = responseHeaders["retry-after"] + 1000	
			} :: RatelimitedInformation
		else
			-- Discord ratelimit
			
			ratelimitInformation = {
				scope = responseHeaders["x-ratelimit-scope"],
				retryAfter = tonumber(responseHeaders["retry-after"]),
				retryAfterSafe = responseHeaders["retry-after"] + 1000,
			} :: RatelimitedInformation
		end
	end
	
	local requestStatus : requestStatus = {
		success = response.Success, 
		statusCode = response.StatusCode, 
		statusMessage = response.StatusMessage
	}

	return decodedBody, requestStatus, ratelimitInformation
end

function Webhook:execute(content : string?, embeds : {}?, queue : boolean, waitForMessage : boolean, optionalExecuteInfo) : ({}?, RequestStatus, RatelimitInformation | RatelimitedInformation | {})
	local executeInfo = optionalExecuteInfo or OptionalExecuteInfo.new()
	local isRequestValid, errorMessage = self:_validateExecuteRequest(content, embeds, executeInfo)	
	if not isRequestValid then return error(errorMessage) end
	
	if queue == nil then queue = true end
	if waitForMessage == nil then waitForMessage = false end
	
	local requestUrl = self.baseUrl
	local requestBody = {
		content = content,
		username = executeInfo.usernameOverride,
		avatar_url = executeInfo.avatarOverride,
		tts = executeInfo.tts,
		embeds = embeds,
		flags = executeInfo.messageFlags.value,
		thread_name = executeInfo.threadName
	}
	
	if queue then requestUrl ..= "/queue" end
	requestUrl ..= "?wait=" .. tostring(waitForMessage)
	if executeInfo.threadId then requestUrl ..= "&thread_id=" .. executeInfo.threadId end

	local responseBody, requestStatus, requestRatelimitInfo = self:_request(requestUrl, "POST", requestBody, "application/json")

	if not queue and waitForMessage and requestStatus.success then
		if not executeInfo.threadId then 
			return Message.new(responseBody), requestStatus, requestRatelimitInfo
		else
			return ThreadMessage.new(responseBody), requestStatus, requestRatelimitInfo
		end
	end
	
	return nil, requestStatus, requestRatelimitInfo
end

function Webhook:editMessage(messageId : string, content : string?, embeds : {}?, threadId : string?) : ({}?, RequestStatus, RatelimitInformation | RatelimitedInformation)
	local isRequestValid, errorMessage = self:_validateEditMessageRequest(content, embeds)
	if not isRequestValid then return error(errorMessage) end
	
	local requestUrl = self.baseUrl .. "/messages/" .. messageId
	local requestBody = {
		content = content,
		embeds = embeds
	}

	if threadId then requestUrl ..= "?thread_id=" .. threadId end
	
	local responseBody, requestStatus, requestRatelimitInfo = self:_request(requestUrl, "PATCH", requestBody, "application/json")
	
	if not requestStatus.success then return nil, requestStatus end

	if not threadId then
		return EditedMessage.new(responseBody), requestStatus, requestRatelimitInfo
	else
		return EditedThreadMessage.new(responseBody), requestStatus, requestRatelimitInfo
	end
end

function Webhook:deleteMessage(messageId : string, threadId : string?) : (RequestStatus, RatelimitInformation | RatelimitedInformation)
	local requestUrl = self.baseUrl .. "/messages/" .. messageId

	if threadId then requestUrl ..= "?thread_id=" .. threadId end	
	
	local _, requestStatus, requestRatelimitInfo = self:_request(requestUrl, "DELETE")
	
	return requestStatus, requestRatelimitInfo
end

return Webhook]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
						<Item class="ModuleScript" referent="RBX62375D2255454218B919C7EF8962017B">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Author</string>
								<string name="ScriptGuid">{53F59D82-BF8C-42D0-AE0E-B3C69E0E5A4A}</string>
								<ProtectedString name="Source"><![CDATA[local Author = {}
Author.__index = Author

function Author.new(data)
	local self = setmetatable({}, Author)
	
	self.id = data.id
	self.username = data.username
	self.avatar = data.avatar
	self.bot = data.bot or false
	
	return self
end

function Author:getAvatarUrl(size : number?, imageFormat : string?) : string?
	if not self.avatar then return end
	if imageFormat then 
		if imageFormat ~= ".jpeg" and imageFormat ~= ".png" and imageFormat ~= ".webp" and imageFormat ~= ".gif" then return error("Unsupported image format given.") end 
	end
	
	if size then
		if size < 16 or size > 4096 then return error("Image size must be between 16 to 4096.") end
		if math.sqrt(size) % 1 ~= 0 then return error("Image size must be any power of two") end
		
		return "https://cdn.discordapp.com/avatars/" .. self.id .. "/" .. self.avatar .. (imageFormat or ".png") .. "?size=" .. size
	else
		return "https://cdn.discordapp.com/avatars/" .. self.id .. "/" .. self.avatar .. (imageFormat or ".png")
	end
end

function Author:hasAnimatedAvatar() : boolean
	if not self.avatar then return false end
	
	return self.avatar:match("a_") == "a_"
end

return Author]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXD6653F5E38FF4B6BB450EA707CA7D34B">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">EditedMessage</string>
								<string name="ScriptGuid">{1EBCA245-3AC2-4ACD-810F-D5E929900176}</string>
								<ProtectedString name="Source"><![CDATA[local EditedMessage = {}
EditedMessage.__index = EditedMessage

local Message = require(script.Parent.Message)

setmetatable(EditedMessage, Message)

function EditedMessage.new(data)
	local self = setmetatable(Message.new(data), EditedMessage)
	
	self.editedTimestamp = data.edited_timestamp
	self.editedAt = DateTime.fromIsoDate(data.edited_timestamp)
	
	return self
end

return EditedMessage]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXF8BB3F0AA65E41C1A6119DF0B4CB4BF7">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">EditedThreadMessage</string>
								<string name="ScriptGuid">{0E083F46-28F2-431F-A2BA-75D263C83F2F}</string>
								<ProtectedString name="Source"><![CDATA[local EditedThreadMessage = {}
EditedThreadMessage.__index = EditedThreadMessage

local ThreadMessage = require(script.Parent.ThreadMessage)

setmetatable(EditedThreadMessage, ThreadMessage)

function EditedThreadMessage.new(data)
	local self = setmetatable(ThreadMessage.new(data), EditedThreadMessage)
	
	self.editedTimestamp = data.edited_timestamp
	self.editedAt = DateTime.fromIsoDate(data.edited_timestamp)
	
	return self
end

return EditedThreadMessage]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX2B73B98D00D04EDB82A098D66F07DD87">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Embed</string>
								<string name="ScriptGuid">{328CE4F3-C89B-46E2-873B-4AD704988177}</string>
								<ProtectedString name="Source"><![CDATA[local Embed = {}
Embed.__index = Embed

function Embed.new(title : string?, description : string?, url : string?)
	local self = setmetatable({}, Embed)
	
	self.title = title
	self.description = description
	self.url = url
	
	self.fields = {}
	
	return self
end

function Embed:_validate() : (boolean, string?)
	if self.title then
		if string.len(self.title) > 256 then return false, "The title of an embed must only contain up to 256 characters." end 
	end
	
	if self.description then
		if string.len(self.description) > 4096 then return false, "The description of an embed must only contain up to 4096 characters." end 
	end
	
	if self.footer then 
		if string.len(self.footer.text) > 2048 then return false, "The text in a footer must only contain up to 2048 characters." end 
		
		if self.footer.icon_url then
			if not self.footer.icon_url:match("https") then return false, "The footer's icon url only supports HTTP(S)." end
		end
	end
	
	if self.image then
		if not self.image.url:match("https") then return false, "The image's url only supports HTTP(S)." end
	end
	
	if self.thumbnail then
		if not self.thumbnail.url:match("https") then return false, "The thumbnail's url only supports HTTP(S)." end	
	end
	
	if self.author then 
		if string.len(self.author.name) > 256 then return false, "The name of an author must only contain up to 256 characters." end
		
		if self.author.icon_url then
			if not self.author.icon_url:match("https") then return false, "The author's icon url only supports HTTP(S)." end
		end
	end
	
	if #self.fields > 25 then return false, "One embed must only have up to 25 fields." end
	
	for _, field in self.fields do
		if string.len(field.name) > 256 then return false, "The name of a field must only contain up to 256 characters." end
		if string.len(field.value) > 1024 then return false, "The value of a field must only contain up to 1024 characters." end			
	end
	
	return true
end

function Embed:setTitle(title : string) : nil	
	self.title = title
end

function Embed:setDescription(description : string) : nil	
	self.description = description
end

function Embed:setUrl(url : string) : nil
	self.url = url
end

function Embed:setTimestamp(customTimestamp : string?) : nil
	if customTimestamp then self.timestamp = customTimestamp return end

	self.timestamp = os.date("!%Y-%m-%dT%H:%M:%S." .. math.round(tick() % 1 * 1000) .. "Z")
end

function Embed:setColor(color3 : Color3) : nil
	self.color = bit32.lshift((color3.R * 255), 16) + bit32.lshift((color3.G * 255), 8) + (color3.B * 255)
end

function Embed:setFooter(text : string, iconUrl : string?) : nil
	self.footer = {
		text = text,
		icon_url = iconUrl
	}
end

function Embed:setImage(url : string) : nil
	self.image = {
		url = url
	}
end

function Embed:setThumbnail(url : string) : nil
	self.thumbnail = {
		url = url
	}
end

function Embed:setAuthor(name : string, url : string?, iconUrl : string?) : nil
	self.author = {
		name = name,
		url = url,
		icon_url = iconUrl
	}
end

function Embed:addField(name : string, value : string, inLine : boolean?) : nil
	table.insert(self.fields, {
		name = name,
		value = value,
		inline = inLine
	})
end

function Embed:totalCharacters() : number
	local total = 0
	
	if self.title then total += string.len(self.title) end
	if self.description then total += string.len(self.description) end
	if self.footer then total += string.len(self.footer.text) end
	if self.author then total += string.len(self.author.name) end
	
	if self.fields then
		for _, field in self.fields do
			total += (string.len(field.name) + string.len(field.value))
		end
	end
	
	return total
end

function Embed:colorToRGB() : {red : number, green : number, blue : number}?
	if not self.color then return end
	
	local r = bit32.band((bit32.rshift(self.color, (8 * 2))), 0xFF)
	local g = bit32.band((bit32.rshift(self.color, (8 * 1))), 0xFF)
	local b = bit32.band((bit32.rshift(self.color, (8 * 0))), 0xFF)
	
	return {
		red = r,
		green = g,
		blue = b
	}
end

return Embed]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXCC6B7737CFAE497AA43FD222DD691B3C">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Emoji</string>
								<string name="ScriptGuid">{9ECEA909-A132-4FC4-9993-CB5FA61E5E98}</string>
								<ProtectedString name="Source"><![CDATA[local Emoji = {}
Emoji.__index = Emoji

function Emoji.new(data)
	local self = setmetatable({}, Emoji)
	
	self.id = data.id
	self.name = data.name
	self.animated = data.animated or false
	
	return self
end

return Emoji]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXDCBEC10703A04B1BBC547443B115465A">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Message</string>
								<string name="ScriptGuid">{C482FD2E-8493-4CEB-AB36-CEF2AA62DD13}</string>
								<ProtectedString name="Source"><![CDATA[local Message = {}
Message.__index = Message

local Author = require(script.Parent.Author)
local User = require(script.Parent.User)
local Embed = require(script.Parent.Embed)
local Reaction = require(script.Parent.Reaction)
local MessageFlags = require(script.Parent.MessageFlags)

function Message.new(data)
	local self = setmetatable({}, Message)

	self.id = data.id
	self.messageType = data["type"]
	self.content = data.content
	self.channelId = data.channel_id
	self.author = Author.new(data.author)
	self.embeds = {}
	self.reactions = {}
	self.mentions = {}
	self.mentionRoles = {}
	self.pinned = data.pinned
	self.mentionEveryone = data.mention_everyone
	self.tts = data.tts
	self.timestamp = data.timestamp
	self.createdAt = DateTime.fromIsoDate(data.timestamp)
	self.flags = MessageFlags.fromBitfield(data.flags)
	self.webhookId = data.webhook_id
	self.jumpUrl = "https://discord.com/channels/@me/" .. self.channelId .. "/" .. self.id

	if data.embeds then
		for _, embedData in data.embeds do
			local embed = Embed.new(embedData.title, embedData.description, embedData.url)

			if embedData.color then
				embed.color = embedData.color
			end

			if embedData.timestamp then
				embed:setTimestamp(embedData.timestamp)
			end

			if embedData.footer then
				embed:setFooter(embedData.footer.text, embedData.footer.icon_url) 

				embed.footer.proxy_icon_url = embedData.footer.proxy_icon_url
			end

			if embedData.image then 
				embed:setImage(embedData.image.url)

				embed.image.height = embedData.image.height
				embed.image.width = embedData.image.width
				embed.image.proxy_url = embedData.image.proxy_url
			end

			if embedData.thumbnail then
				embed:setThumbnail(embedData.thumbnail.url)

				embed.thumbnail.height = embedData.thumbnail.height
				embed.thumbnail.width = embedData.thumbnail.width
				embed.thumbnail.proxy_url = embedData.thumbnail.proxy_url
			end

			if embedData.author then 
				embed:setAuthor(embedData.author.name, embedData.author.url, embedData.author.icon_url)

				embed.author.proxy_icon_url = embedData.author.proxy_icon_url
			end	

			if embedData.fields then
				for _, fieldData in embedData.fields do
					embed:addField(fieldData.name, fieldData.value, fieldData.inline)
				end
			end

			table.insert(self.embeds, embed)
		end
	end	

	if data.mentions then
		for _, mentionData in data.mentions do
			table.insert(self.mentions, User.new(mentionData))
		end
	end	

	if data.mention_roles then
		for _, roleId in data.mention_roles do
			table.insert(self.mentionRoles, roleId)
		end
	end	

	if data.reactions then
		for _, reactionData in data.reactions do
			table.insert(self.reactions, Reaction.new(reactionData))
		end
	end

	return self
end

return Message]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXF4B566010FD141AF87FFB48D455325D9">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">MessageFlags</string>
								<string name="ScriptGuid">{9F1C8FF0-1C72-4797-9E58-51FF344DF0F3}</string>
								<ProtectedString name="Source"><![CDATA[local MessageFlags = {}
MessageFlags.__index = MessageFlags

local BaseFlags = require(script.Parent.bases.BaseFlags)

setmetatable(MessageFlags, BaseFlags)

function MessageFlags.fromFlags(flags : {[number] : number})
	local self = setmetatable(BaseFlags.fromBitfield(0), MessageFlags)
	
	for _, flag in flags do
		self.value = bit32.bor(self.value, flag)
	end

	return self
end

return MessageFlags]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXAD3AD31A0934449793DC7FC562C245BE">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">OptionalExecuteInfo</string>
								<string name="ScriptGuid">{78D14401-48D8-4BEB-BB24-811C8661DB98}</string>
								<ProtectedString name="Source"><![CDATA[local OptionalExecuteInfo = {}
OptionalExecuteInfo.__index = OptionalExecuteInfo

local MessageFlags = require(script.Parent.MessageFlags)

function OptionalExecuteInfo.new(threadId : string?, tts : boolean?, usernameOverride : string?, avatarOverride : string?, messageFlags : MessageFlags?, threadName : string?)
	local self = setmetatable({}, OptionalExecuteInfo)
	
	self.threadId = threadId
	self.tts = tts or false
	self.usernameOverride = usernameOverride
	self.avatarOverride = avatarOverride
	self.messageFlags = messageFlags or MessageFlags.fromBitfield(0)
	self.threadName = threadName
	
	return self
end

return OptionalExecuteInfo]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX3D99152528264C6DA464BBA020629F78">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">PublicUserFlags</string>
								<string name="ScriptGuid">{CE059CA6-6FAA-458C-80C1-14C5D137C57D}</string>
								<ProtectedString name="Source"><![CDATA[local PublicUserFlags = {}
PublicUserFlags.__index = PublicUserFlags

local BaseFlags = require(script.Parent.bases.BaseFlags)

setmetatable(PublicUserFlags, BaseFlags)

function PublicUserFlags.fromBitfield(value : number)
	local self = setmetatable(BaseFlags.fromBitfield(value), PublicUserFlags)

	return self
end

function PublicUserFlags:getFlags() : {[number] : number}
	local enum = require(script.Parent.utilities.Enum)
	local flags = {}
	
	for _, flag in enum.UserPublicFlags do
		if self:hasFlag(flag) then table.insert(flags, flag) end
	end
	
	return flags
end

return PublicUserFlags]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXF6CE561289A44E19B126EAEEA05A11CE">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">Reaction</string>
								<string name="ScriptGuid">{8B31B805-BAFA-478A-B3BE-72DBFF0BDFBD}</string>
								<ProtectedString name="Source"><![CDATA[local Reaction = {}
Reaction.__index = Reaction

local Emoji = require(script.Parent.Emoji)

function Reaction.new(data)
	local self = setmetatable({}, Reaction)

	self.emoji = Emoji.new(data.emoji)
	self.me = data.me
	self.count = data.count

	return self
end

return Reaction]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXE5E7102FB1444F5DAEBE6F1821CB14D8">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ThreadMessage</string>
								<string name="ScriptGuid">{B5A5DC3C-D66F-4C5A-828F-4FFCBFC3FEB4}</string>
								<ProtectedString name="Source"><![CDATA[local ThreadMessage = {}
ThreadMessage.__index = ThreadMessage

local Message = require(script.Parent.Message)

setmetatable(ThreadMessage, Message)

function ThreadMessage.new(data)
	local self = setmetatable(Message.new(data), ThreadMessage)
	
	self.position = data.position
	
	return self
end

return ThreadMessage]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX96599383F8E648FE8088D0BA72D9ECE3">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">User</string>
								<string name="ScriptGuid">{11BF1D05-2603-4A7F-B91F-91E6FDBF3E86}</string>
								<ProtectedString name="Source"><![CDATA[local User = {}
User.__index = User

local Author = require(script.Parent.Author)
local PublicUserFlags = require(script.Parent.PublicUserFlags)

setmetatable(User, Author)

function User.new(data)
	local self = setmetatable(Author.new(data), User)
	
	self.globalName = data.global_name
	self.publicFlags = PublicUserFlags.fromBitfield(data.public_flags)
	
	return self
end

return User]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="Folder" referent="RBX70681339D0E040EDA3DCB81AD9F585E9">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">bases</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
							<Item class="ModuleScript" referent="RBX8BE39AAC020E4AE2A0802E4E1D41FE9C">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
									<bool name="DefinesCapabilities">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">BaseFlags</string>
									<string name="ScriptGuid">{11F28485-5875-4ADF-8B50-5CB600F40BD4}</string>
									<ProtectedString name="Source"><![CDATA[local BaseFlags = {}
BaseFlags.__index = BaseFlags

function BaseFlags.fromBitfield(value : number)
	local self = setmetatable({}, BaseFlags)
	
	self.value = value
	
	return self
end

function BaseFlags:hasFlag(flag : number) : boolean
	return bit32.band(self.value, flag) == flag
end

function BaseFlags:setFlag(flag : number, toggle : boolean) : nil
	if toggle then
		self.value = bit32.bor(self.value, flag)
	else
		self.value = bit32.band(self.value, bit32.bnot(flag))
	end
end

return BaseFlags]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
								</Properties>
							</Item>
						</Item>
						<Item class="Folder" referent="RBX506B9AC83078446A970F17AE2752B3D8">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<string name="Name">utilities</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
							<Item class="ModuleScript" referent="RBXD1B69B4487434D0FB4586FC18595C04F">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
									<bool name="DefinesCapabilities">false</bool>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">Enum</string>
									<string name="ScriptGuid">{FC427941-F831-49DA-93CC-E71FE2BCA975}</string>
									<ProtectedString name="Source"><![CDATA[return {
	UserPublicFlags = {
		STAFF = 1,
		PARTNER = 2,
		HYPESQUAD = 4,
		BUG_HUNTER_LEVEL_1 = 8,
		HYPESQUAD_ONLINE_HOUSE_1 = 64,
		HYPESQUAD_ONLINE_HOUSE_2 = 128,
		HYPESQUAD_ONLINE_HOUSE_3 = 256,
		PREMIUM_EARLY_SUPPORTER = 512,
		TEAM_PSEUDO_USER = 1024,
		BUG_HUNTER_LEVEL_2 = 16384,
		VERIFIED_BOT = 65536,
		VERIFIED_DEVELOPER = 131072,
		CERTIFIED_MODERATOR = 262144,
		BOT_HTTP_INTERACTIONS = 524288,
		ACTIVE_DEVELOPER = 4194304		
	},

	MessageFlags = {
		SUPPRESS_EMBEDS = 4
	},

	AvatarImageFormats = {
		JPEG = ".jpeg",
		PNG = ".png",
		WebP = ".webp",
		GIF = ".gif"
	},
	
	RatelimitScopes = {
		USER = "user",
		SHARED = "shared",
		GLOBAL = "global"
	}
}]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
								</Properties>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX615BF1F4685A4C8ABA990BACEF978C7C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">osyrisrblx_t@3.0.0</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX01232DCA73514E459BB3B32E1FEFE683">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">t</string>
							<string name="ScriptGuid">{B6669504-AA13-45BB-BA0A-25199ED3BD65}</string>
							<ProtectedString name="Source"><![CDATA[-- t: a runtime typechecker for Roblox

local t = {}

function t.type(typeName)
	return function(value)
		local valueType = type(value)
		if valueType == typeName then
			return true
		else
			return false, string.format("%s expected, got %s", typeName, valueType)
		end
	end
end

function t.typeof(typeName)
	return function(value)
		local valueType = typeof(value)
		if valueType == typeName then
			return true
		else
			return false, string.format("%s expected, got %s", typeName, valueType)
		end
	end
end

--[[**
	matches any type except nil

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.any(value)
	if value ~= nil then
		return true
	else
		return false, "any expected, got nil"
	end
end

--Lua primitives

--[[**
	ensures Lua primitive boolean type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.boolean = t.typeof("boolean")

--[[**
	ensures Lua primitive thread type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.thread = t.typeof("thread")

--[[**
	ensures Lua primitive callback type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.callback = t.typeof("function")
t["function"] = t.callback

--[[**
	ensures Lua primitive none type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.none = t.typeof("nil")
t["nil"] = t.none

--[[**
	ensures Lua primitive string type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.string = t.typeof("string")

--[[**
	ensures Lua primitive table type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.table = t.typeof("table")

--[[**
	ensures Lua primitive userdata type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.userdata = t.type("userdata")

--[[**
	ensures value is a number and non-NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.number(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value == value then
			return true
		else
			return false, "unexpected NaN value"
		end
	else
		return false, string.format("number expected, got %s", valueType)
	end
end

--[[**
	ensures value is NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.nan(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value ~= value then
			return true
		else
			return false, "unexpected non-NaN value"
		end
	else
		return false, string.format("number expected, got %s", valueType)
	end
end

-- roblox types

--[[**
	ensures Roblox Axes type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Axes = t.typeof("Axes")

--[[**
	ensures Roblox BrickColor type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.BrickColor = t.typeof("BrickColor")

--[[**
	ensures Roblox CatalogSearchParams type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CatalogSearchParams = t.typeof("CatalogSearchParams")

--[[**
	ensures Roblox CFrame type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CFrame = t.typeof("CFrame")

--[[**
	ensures Roblox Color3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Color3 = t.typeof("Color3")

--[[**
	ensures Roblox ColorSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequence = t.typeof("ColorSequence")

--[[**
	ensures Roblox ColorSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequenceKeypoint = t.typeof("ColorSequenceKeypoint")

--[[**
	ensures Roblox DateTime type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DateTime = t.typeof("DateTime")

--[[**
	ensures Roblox DockWidgetPluginGuiInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DockWidgetPluginGuiInfo = t.typeof("DockWidgetPluginGuiInfo")

--[[**
	ensures Roblox Enum type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enum = t.typeof("Enum")

--[[**
	ensures Roblox EnumItem type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.EnumItem = t.typeof("EnumItem")

--[[**
	ensures Roblox Enums type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enums = t.typeof("Enums")

--[[**
	ensures Roblox Faces type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Faces = t.typeof("Faces")

--[[**
	ensures Roblox Instance type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Instance = t.typeof("Instance")

--[[**
	ensures Roblox NumberRange type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberRange = t.typeof("NumberRange")

--[[**
	ensures Roblox NumberSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequence = t.typeof("NumberSequence")

--[[**
	ensures Roblox NumberSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequenceKeypoint = t.typeof("NumberSequenceKeypoint")

--[[**
	ensures Roblox PathWaypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PathWaypoint = t.typeof("PathWaypoint")

--[[**
	ensures Roblox PhysicalProperties type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PhysicalProperties = t.typeof("PhysicalProperties")

--[[**
	ensures Roblox Random type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Random = t.typeof("Random")

--[[**
	ensures Roblox Ray type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Ray = t.typeof("Ray")

--[[**
	ensures Roblox RaycastParams type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RaycastParams = t.typeof("RaycastParams")

--[[**
	ensures Roblox RaycastResult type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RaycastResult = t.typeof("RaycastResult")

--[[**
	ensures Roblox RBXScriptConnection type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptConnection = t.typeof("RBXScriptConnection")

--[[**
	ensures Roblox RBXScriptSignal type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptSignal = t.typeof("RBXScriptSignal")

--[[**
	ensures Roblox Rect type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Rect = t.typeof("Rect")

--[[**
	ensures Roblox Region3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3 = t.typeof("Region3")

--[[**
	ensures Roblox Region3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3int16 = t.typeof("Region3int16")

--[[**
	ensures Roblox TweenInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.TweenInfo = t.typeof("TweenInfo")

--[[**
	ensures Roblox UDim type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim = t.typeof("UDim")

--[[**
	ensures Roblox UDim2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim2 = t.typeof("UDim2")

--[[**
	ensures Roblox Vector2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2 = t.typeof("Vector2")

--[[**
	ensures Roblox Vector2int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2int16 = t.typeof("Vector2int16")

--[[**
	ensures Roblox Vector3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3 = t.typeof("Vector3")

--[[**
	ensures Roblox Vector3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3int16 = t.typeof("Vector3int16")

--[[**
	ensures value is a given literal value

	@param literal The literal to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.literal(...)
	local size = select("#", ...)
	if size == 1 then
		local literal = ...
		return function(value)
			if value ~= literal then
				return false, string.format("expected %s, got %s", tostring(literal), tostring(value))
			end

			return true
		end
	else
		local literals = {}
		for i = 1, size do
			local value = select(i, ...)
			literals[i] = t.literal(value)
		end

		return t.union(table.unpack(literals, 1, size))
	end
end

--[[**
	DEPRECATED
	Please use t.literal
**--]]
t.exactly = t.literal

--[[**
	Returns a t.union of each key in the table as a t.literal

	@param keyTable The table to get keys from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.keyOf(keyTable)
	local keys = {}
	local length = 0
	for key in pairs(keyTable) do
		length = length + 1
		keys[length] = key
	end

	return t.literal(table.unpack(keys, 1, length))
end

--[[**
	Returns a t.union of each value in the table as a t.literal

	@param valueTable The table to get values from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.valueOf(valueTable)
	local values = {}
	local length = 0
	for _, value in pairs(valueTable) do
		length = length + 1
		values[length] = value
	end

	return t.literal(table.unpack(values, 1, length))
end

--[[**
	ensures value is an integer

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.integer(value)
	local success, errMsg = t.number(value)
	if not success then
		return false, errMsg or ""
	end

	if value % 1 == 0 then
		return true
	else
		return false, string.format("integer expected, got %s", value)
	end
end

--[[**
	ensures value is a number where min <= value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMin(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value >= min then
			return true
		else
			return false, string.format("number >= %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value <= max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMax(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg
		end

		if value <= max then
			return true
		else
			return false, string.format("number <= %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where min < value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMinExclusive(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if min < value then
			return true
		else
			return false, string.format("number > %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value < max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMaxExclusive(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value < max then
			return true
		else
			return false, string.format("number < %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where value > 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberPositive = t.numberMinExclusive(0)

--[[**
	ensures value is a number where value < 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberNegative = t.numberMaxExclusive(0)

--[[**
	ensures value is a number where min <= value <= max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrained(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMin(min)
	local maxCheck = t.numberMax(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value is a number where min < value < max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrainedExclusive(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMinExclusive(min)
	local maxCheck = t.numberMaxExclusive(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value matches string pattern

	@param string pattern to check against

	@returns A function that will return true iff the condition is passed
**--]]
function t.match(pattern)
	assert(t.string(pattern))
	return function(value)
		local stringSuccess, stringErrMsg = t.string(value)
		if not stringSuccess then
			return false, stringErrMsg
		end

		if string.match(value, pattern) == nil then
			return false, string.format("%q failed to match pattern %q", value, pattern)
		end

		return true
	end
end

--[[**
	ensures value is either nil or passes check

	@param check The check to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.optional(check)
	assert(t.callback(check))
	return function(value)
		if value == nil then
			return true
		end

		local success, errMsg = check(value)
		if success then
			return true
		else
			return false, string.format("(optional) %s", errMsg or "")
		end
	end
end

--[[**
	matches given tuple against tuple type definition

	@param ... The type definition for the tuples

	@returns A function that will return true iff the condition is passed
**--]]
function t.tuple(...)
	local checks = { ... }
	return function(...)
		local args = { ... }
		for i, check in ipairs(checks) do
			local success, errMsg = check(args[i])
			if success == false then
				return false, string.format("Bad tuple index #%s:\n\t%s", i, errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all keys in given table pass check

	@param check The function to use to check the keys

	@returns A function that will return true iff the condition is passed
**--]]
function t.keys(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key in pairs(value) do
			local success, errMsg = check(key)
			if success == false then
				return false, string.format("bad key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all values in given table pass check

	@param check The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.values(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key, val in pairs(value) do
			local success, errMsg = check(val)
			if success == false then
				return false, string.format("bad value for key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass keyCheck and all values pass valueCheck

	@param keyCheck The function to use to check the keys
	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.map(keyCheck, valueCheck)
	assert(t.callback(keyCheck))
	assert(t.callback(valueCheck))
	local keyChecker = t.keys(keyCheck)
	local valueChecker = t.values(valueCheck)

	return function(value)
		local keySuccess, keyErr = keyChecker(value)
		if not keySuccess then
			return false, keyErr or ""
		end

		local valueSuccess, valueErr = valueChecker(value)
		if not valueSuccess then
			return false, valueErr or ""
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass valueCheck and all values are true

	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.set(valueCheck)
	return t.map(valueCheck, t.literal(true))
end

do
	local arrayKeysCheck = t.keys(t.integer)
--[[**
		ensures value is an array and all values of the array match check

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.array(check)
		assert(t.callback(check))
		local valuesCheck = t.values(check)

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[array] %s", keyErrMsg or "")
			end

			-- # is unreliable for sparse arrays
			-- Count upwards using ipairs to avoid false positives from the behavior of #
			local arraySize = 0

			for _ in ipairs(value) do
				arraySize = arraySize + 1
			end

			for key in pairs(value) do
				if key < 1 or key > arraySize then
					return false, string.format("[array] key %s must be sequential", tostring(key))
				end
			end

			local valueSuccess, valueErrMsg = valuesCheck(value)
			if not valueSuccess then
				return false, string.format("[array] %s", valueErrMsg or "")
			end

			return true
		end
	end

--[[**
		ensures value is an array of a strict makeup and size

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictArray(...)
		local valueTypes = { ... }
		assert(t.array(t.callback)(valueTypes))

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[strictArray] %s", keyErrMsg or "")
			end

			-- If there's more than the set array size, disallow
			if #valueTypes < #value then
				return false, string.format("[strictArray] Array size exceeds limit of %d", #valueTypes)
			end

			for idx, typeFn in pairs(valueTypes) do
				local typeSuccess, typeErrMsg = typeFn(value[idx])
				if not typeSuccess then
					return false, string.format("[strictArray] Array index #%d - %s", idx, typeErrMsg)
				end
			end

			return true
		end
	end
end

do
	local callbackArray = t.array(t.callback)
--[[**
		creates a union type

		@param ... The checks to union

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.union(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				if check(value) then
					return true
				end
			end

			return false, "bad type for union"
		end
	end

--[[**
		Alias for t.union
	**--]]
	t.some = t.union

--[[**
		creates an intersection type

		@param ... The checks to intersect

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.intersection(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				local success, errMsg = check(value)
				if not success then
					return false, errMsg or ""
				end
			end

			return true
		end
	end

--[[**
		Alias for t.intersection
	**--]]
	t.every = t.intersection
end

do
	local checkInterface = t.map(t.any, t.callback)
--[[**
		ensures value matches given interface definition

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.interface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			return true
		end
	end

--[[**
		ensures value matches given interface definition strictly

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictInterface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			for key in pairs(value) do
				if not checkTable[key] then
					return false, string.format("[interface] unexpected field %q", tostring(key))
				end
			end

			return true
		end
	end
end

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceOf(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if value.ClassName ~= className then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

t.instance = t.instanceOf

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName by an IsA comparison

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceIsA(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if not value:IsA(className) then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

--[[**
	ensures value is an enum of the correct type

	@param enum The enum to check

	@returns A function that will return true iff the condition is passed
**--]]
function t.enum(enum)
	assert(t.Enum(enum))
	return function(value)
		local enumItemSuccess, enumItemErrMsg = t.EnumItem(value)
		if not enumItemSuccess then
			return false, enumItemErrMsg
		end

		if value.EnumType == enum then
			return true
		else
			return false, string.format("enum of %s expected, got enum of %s", tostring(enum), tostring(value.EnumType))
		end
	end
end

do
	local checkWrap = t.tuple(t.callback, t.callback)

--[[**
		wraps a callback in an assert with checkArgs

		@param callback The function to wrap
		@param checkArgs The function to use to check arguments in the assert

		@returns A function that first asserts using checkArgs and then calls callback
	**--]]
	function t.wrap(callback, checkArgs)
		assert(checkWrap(callback, checkArgs))
		return function(...)
			assert(checkArgs(...))
			return callback(...)
		end
	end
end

--[[**
	asserts a given check

	@param check The function to wrap with an assert

	@returns A function that simply wraps the given check in an assert
**--]]
function t.strict(check)
	return function(...)
		assert(check(...))
	end
end

do
	local checkChildren = t.map(t.string, t.callback)

--[[**
		Takes a table where keys are child names and values are functions to check the children against.
		Pass an instance tree into the function.
		If at least one child passes each check, the overall check passes.

		Warning! If you pass in a tree with more than one child of the same name, this function will always return false

		@param checkTable The table to check against

		@returns A function that checks an instance tree
	**--]]
	function t.children(checkTable)
		assert(checkChildren(checkTable))

		return function(value)
			local instanceSuccess, instanceErrMsg = t.Instance(value)
			if not instanceSuccess then
				return false, instanceErrMsg or ""
			end

			local childrenByName = {}
			for _, child in ipairs(value:GetChildren()) do
				local name = child.Name
				if checkTable[name] then
					if childrenByName[name] then
						return false, string.format("Cannot process multiple children with the same name %q", name)
					end

					childrenByName[name] = child
				end
			end

			for name, check in pairs(checkTable) do
				local success, errMsg = check(childrenByName[name])
				if not success then
					return false, string.format("[%s.%s] %s", value:GetFullName(), name, errMsg or "")
				end
			end

			return true
		end
	end
end

return t
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX23D05DBA6848427CA2C1337444434D40">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">sleitnick_signal@2.0.1</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX097742A05FEE4C77840C13CCBD6120C4">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">signal</string>
							<string name="ScriptGuid">{F8027F4B-5C89-480E-93D2-C2F990F615B8}</string>
							<ProtectedString name="Source"><![CDATA[-- -----------------------------------------------------------------------------
--               Batched Yield-Safe Signal Implementation                     --
-- This is a Signal class which has effectively identical behavior to a       --
-- normal RBXScriptSignal, with the only difference being a couple extra      --
-- stack frames at the bottom of the stack trace when an error is thrown.     --
-- This implementation caches runner coroutines, so the ability to yield in   --
-- the signal handlers comes at minimal extra cost over a naive signal        --
-- implementation that either always or never spawns a thread.                --
--                                                                            --
-- License:                                                                   --
--   Licensed under the MIT license.                                          --
--                                                                            --
-- Authors:                                                                   --
--   stravant - July 31st, 2021 - Created the file.                           --
--   sleitnick - August 3rd, 2021 - Modified for Knit.                        --
-- -----------------------------------------------------------------------------

-- Signal types
export type Connection = {
	Disconnect: (self: Connection) -> (),
	Destroy: (self: Connection) -> (),
	Connected: boolean,
}

export type Signal<T...> = {
	Fire: (self: Signal<T...>, T...) -> (),
	FireDeferred: (self: Signal<T...>, T...) -> (),
	Connect: (self: Signal<T...>, fn: (T...) -> ()) -> Connection,
	Once: (self: Signal<T...>, fn: (T...) -> ()) -> Connection,
	DisconnectAll: (self: Signal<T...>) -> (),
	GetConnections: (self: Signal<T...>) -> { Connection },
	Destroy: (self: Signal<T...>) -> (),
	Wait: (self: Signal<T...>) -> T...,
}

-- The currently idle thread to run the next handler on
local freeRunnerThread = nil

-- Function which acquires the currently idle handler runner thread, runs the
-- function fn on it, and then releases the thread, returning it to being the
-- currently idle one.
-- If there was a currently idle runner thread already, that's okay, that old
-- one will just get thrown and eventually GCed.
local function acquireRunnerThreadAndCallEventHandler(fn, ...)
	local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	fn(...)
	-- The handler finished running, this runner thread is free again.
	freeRunnerThread = acquiredRunnerThread
end

-- Coroutine runner that we create coroutines of. The coroutine can be
-- repeatedly resumed with functions to run followed by the argument to run
-- them with.
local function runEventHandlerInFreeThread(...)
	acquireRunnerThreadAndCallEventHandler(...)
	while true do
		acquireRunnerThreadAndCallEventHandler(coroutine.yield())
	end
end

--[=[
	@within Signal
	@interface SignalConnection
	.Connected boolean
	.Disconnect (SignalConnection) -> ()

	Represents a connection to a signal.
	```lua
	local connection = signal:Connect(function() end)
	print(connection.Connected) --> true
	connection:Disconnect()
	print(connection.Connected) --> false
	```
]=]

-- Connection class
local Connection = {}
Connection.__index = Connection

function Connection:Disconnect()
	if not self.Connected then
		return
	end
	self.Connected = false

	-- Unhook the node, but DON'T clear it. That way any fire calls that are
	-- currently sitting on this node will be able to iterate forwards off of
	-- it, but any subsequent fire calls will not hit it, and it will be GCed
	-- when no more fire calls are sitting on it.
	if self._signal._handlerListHead == self then
		self._signal._handlerListHead = self._next
	else
		local prev = self._signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end
end

Connection.Destroy = Connection.Disconnect

-- Make Connection strict
setmetatable(Connection, {
	__index = function(_tb, key)
		error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(_tb, key, _value)
		error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
})

--[=[
	@within Signal
	@type ConnectionFn (...any) -> ()

	A function connected to a signal.
]=]

--[=[
	@class Signal

	Signals allow events to be dispatched and handled.

	For example:
	```lua
	local signal = Signal.new()

	signal:Connect(function(msg)
		print("Got message:", msg)
	end)

	signal:Fire("Hello world!")
	```
]=]
local Signal = {}
Signal.__index = Signal

--[=[
	Constructs a new Signal

	@return Signal
]=]
function Signal.new<T...>(): Signal<T...>
	local self = setmetatable({
		_handlerListHead = false,
		_proxyHandler = nil,
		_yieldedThreads = nil,
	}, Signal)

	return self
end

--[=[
	Constructs a new Signal that wraps around an RBXScriptSignal.

	@param rbxScriptSignal RBXScriptSignal -- Existing RBXScriptSignal to wrap
	@return Signal

	For example:
	```lua
	local signal = Signal.Wrap(workspace.ChildAdded)
	signal:Connect(function(part) print(part.Name .. " added") end)
	Instance.new("Part").Parent = workspace
	```
]=]
function Signal.Wrap<T...>(rbxScriptSignal: RBXScriptSignal): Signal<T...>
	assert(
		typeof(rbxScriptSignal) == "RBXScriptSignal",
		"Argument #1 to Signal.Wrap must be a RBXScriptSignal; got " .. typeof(rbxScriptSignal)
	)

	local signal = Signal.new()
	signal._proxyHandler = rbxScriptSignal:Connect(function(...)
		signal:Fire(...)
	end)

	return signal
end

--[=[
	Checks if the given object is a Signal.

	@param obj any -- Object to check
	@return boolean -- `true` if the object is a Signal.
]=]
function Signal.Is(obj: any): boolean
	return type(obj) == "table" and getmetatable(obj) == Signal
end

--[=[
	@param fn ConnectionFn
	@return SignalConnection

	Connects a function to the signal, which will be called anytime the signal is fired.
	```lua
	signal:Connect(function(msg, num)
		print(msg, num)
	end)

	signal:Fire("Hello", 25)
	```
]=]
function Signal:Connect(fn)
	local connection = setmetatable({
		Connected = true,
		_signal = self,
		_fn = fn,
		_next = false,
	}, Connection)

	if self._handlerListHead then
		connection._next = self._handlerListHead
		self._handlerListHead = connection
	else
		self._handlerListHead = connection
	end

	return connection
end

--[=[
	@deprecated v1.3.0 -- Use `Signal:Once` instead.
	@param fn ConnectionFn
	@return SignalConnection
]=]
function Signal:ConnectOnce(fn)
	return self:Once(fn)
end

--[=[
	@param fn ConnectionFn
	@return SignalConnection

	Connects a function to the signal, which will be called the next time the signal fires. Once
	the connection is triggered, it will disconnect itself.
	```lua
	signal:Once(function(msg, num)
		print(msg, num)
	end)

	signal:Fire("Hello", 25)
	signal:Fire("This message will not go through", 10)
	```
]=]
function Signal:Once(fn)
	local connection
	local done = false

	connection = self:Connect(function(...)
		if done then
			return
		end

		done = true
		connection:Disconnect()
		fn(...)
	end)

	return connection
end

function Signal:GetConnections()
	local items = {}

	local item = self._handlerListHead
	while item do
		table.insert(items, item)
		item = item._next
	end

	return items
end

-- Disconnect all handlers. Since we use a linked list it suffices to clear the
-- reference to the head handler.
--[=[
	Disconnects all connections from the signal.
	```lua
	signal:DisconnectAll()
	```
]=]
function Signal:DisconnectAll()
	local item = self._handlerListHead
	while item do
		item.Connected = false
		item = item._next
	end
	self._handlerListHead = false

	local yieldedThreads = rawget(self, "_yieldedThreads")
	if yieldedThreads then
		for thread in yieldedThreads do
			if coroutine.status(thread) == "suspended" then
				warn(debug.traceback(thread, "signal disconnected; yielded thread cancelled", 2))
				task.cancel(thread)
			end
		end
		table.clear(self._yieldedThreads)
	end
end

-- Signal:Fire(...) implemented by running the handler functions on the
-- coRunnerThread, and any time the resulting thread yielded without returning
-- to us, that means that it yielded to the Roblox scheduler and has been taken
-- over by Roblox scheduling, meaning we have to make a new coroutine runner.
--[=[
	@param ... any

	Fire the signal, which will call all of the connected functions with the given arguments.
	```lua
	signal:Fire("Hello")

	-- Any number of arguments can be fired:
	signal:Fire("Hello", 32, {Test = "Test"}, true)
	```
]=]
function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item.Connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end

--[=[
	@param ... any

	Same as `Fire`, but uses `task.defer` internally & doesn't take advantage of thread reuse.
	```lua
	signal:FireDeferred("Hello")
	```
]=]
function Signal:FireDeferred(...)
	local item = self._handlerListHead
	while item do
		local conn = item
		task.defer(function(...)
			if conn.Connected then
				conn._fn(...)
			end
		end, ...)
		item = item._next
	end
end

--[=[
	@return ... any
	@yields

	Yields the current thread until the signal is fired, and returns the arguments fired from the signal.
	Yielding the current thread is not always desirable. If the desire is to only capture the next event
	fired, using `Once` might be a better solution.
	```lua
	task.spawn(function()
		local msg, num = signal:Wait()
		print(msg, num) --> "Hello", 32
	end)
	signal:Fire("Hello", 32)
	```
]=]
function Signal:Wait()
	local yieldedThreads = rawget(self, "_yieldedThreads")
	if not yieldedThreads then
		yieldedThreads = {}
		rawset(self, "_yieldedThreads", yieldedThreads)
	end

	local thread = coroutine.running()
	yieldedThreads[thread] = true

	self:Once(function(...)
		yieldedThreads[thread] = nil
		task.spawn(thread, ...)
	end)

	return coroutine.yield()
end

--[=[
	Cleans up the signal.

	Technically, this is only necessary if the signal is created using
	`Signal.Wrap`. Connections should be properly GC'd once the signal
	is no longer referenced anywhere. However, it is still good practice
	to include ways to strictly clean up resources. Calling `Destroy`
	on a signal will also disconnect all connections immediately.
	```lua
	signal:Destroy()
	```
]=]
function Signal:Destroy()
	self:DisconnectAll()

	local proxyHandler = rawget(self, "_proxyHandler")
	if proxyHandler then
		proxyHandler:Disconnect()
	end
end

-- Make signal strict
setmetatable(Signal, {
	__index = function(_tb, key)
		error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(_tb, key, _value)
		error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end,
})

return table.freeze({
	new = Signal.new,
	Wrap = Signal.Wrap,
	Is = Signal.Is,
})
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
						<Item class="ModuleScript" referent="RBX5B88489C2966469F9DBABFEB86E6AAB1">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">init.spec</string>
								<string name="ScriptGuid">{860AE5DE-08BD-4A47-9408-8DE6DF192BA2}</string>
								<ProtectedString name="Source"><![CDATA[local function AwaitCondition(predicate, timeout)
	local start = os.clock()
	timeout = (timeout or 10)
	while true do
		if predicate() then
			return true
		end
		if (os.clock() - start) > timeout then
			return false
		end
		task.wait()
	end
end

return function()
	local Signal = require(script.Parent)

	local signal

	local function NumConns(sig)
		sig = sig or signal
		return #sig:GetConnections()
	end

	beforeEach(function()
		signal = Signal.new()
	end)

	afterEach(function()
		signal:Destroy()
	end)

	describe("Constructor", function()
		it("should create a new signal and fire it", function()
			expect(Signal.Is(signal)).to.equal(true)
			task.defer(function()
				signal:Fire(10, 20)
			end)
			local n1, n2 = signal:Wait()
			expect(n1).to.equal(10)
			expect(n2).to.equal(20)
		end)

		it("should create a proxy signal and connect to it", function()
			local signalWrap = Signal.Wrap(game:GetService("RunService").Heartbeat)
			expect(Signal.Is(signalWrap)).to.equal(true)
			local fired = false
			signalWrap:Connect(function()
				fired = true
			end)
			expect(AwaitCondition(function()
				return fired
			end, 2)).to.equal(true)
			signalWrap:Destroy()
		end)
	end)

	describe("FireDeferred", function()
		it("should be able to fire primitive argument", function()
			local send = 10
			local value
			signal:Connect(function(v)
				value = v
			end)
			signal:FireDeferred(send)
			expect(AwaitCondition(function()
				return (send == value)
			end, 1)).to.equal(true)
		end)

		it("should be able to fire a reference based argument", function()
			local send = { 10, 20 }
			local value
			signal:Connect(function(v)
				value = v
			end)
			signal:FireDeferred(send)
			expect(AwaitCondition(function()
				return (send == value)
			end, 1)).to.equal(true)
		end)
	end)

	describe("Fire", function()
		it("should be able to fire primitive argument", function()
			local send = 10
			local value
			signal:Connect(function(v)
				value = v
			end)
			signal:Fire(send)
			expect(value).to.equal(send)
		end)

		it("should be able to fire a reference based argument", function()
			local send = { 10, 20 }
			local value
			signal:Connect(function(v)
				value = v
			end)
			signal:Fire(send)
			expect(value).to.equal(send)
		end)
	end)

	describe("ConnectOnce", function()
		it("should only capture first fire", function()
			local value
			local c = signal:ConnectOnce(function(v)
				value = v
			end)
			expect(c.Connected).to.equal(true)
			signal:Fire(10)
			expect(c.Connected).to.equal(false)
			signal:Fire(20)
			expect(value).to.equal(10)
		end)
	end)

	describe("Wait", function()
		it("should be able to wait for a signal to fire", function()
			task.defer(function()
				signal:Fire(10, 20, 30)
			end)
			local n1, n2, n3 = signal:Wait()
			expect(n1).to.equal(10)
			expect(n2).to.equal(20)
			expect(n3).to.equal(30)
		end)
	end)

	describe("DisconnectAll", function()
		it("should disconnect all connections", function()
			signal:Connect(function() end)
			signal:Connect(function() end)
			expect(NumConns()).to.equal(2)
			signal:DisconnectAll()
			expect(NumConns()).to.equal(0)
		end)
	end)

	describe("Disconnect", function()
		it("should disconnect connection", function()
			local con = signal:Connect(function() end)
			expect(NumConns()).to.equal(1)
			con:Disconnect()
			expect(NumConns()).to.equal(0)
		end)

		it("should still work if connections disconnected while firing", function()
			local a = 0
			local c
			signal:Connect(function()
				a += 1
			end)
			c = signal:Connect(function()
				c:Disconnect()
				a += 1
			end)
			signal:Connect(function()
				a += 1
			end)
			signal:Fire()
			expect(a).to.equal(3)
		end)

		it("should still work if connections disconnected while firing deferred", function()
			local a = 0
			local c
			signal:Connect(function()
				a += 1
			end)
			c = signal:Connect(function()
				c:Disconnect()
				a += 1
			end)
			signal:Connect(function()
				a += 1
			end)
			signal:FireDeferred()
			expect(AwaitCondition(function()
				return a == 3
			end)).to.equal(true)
		end)
	end)
end
]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBX7296B36D802B4557BE8713405751709B">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<bool name="DefinesCapabilities">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">wally</string>
								<string name="ScriptGuid">{329527C7-E8F6-4945-B0BE-E7A2508D2742}</string>
								<ProtectedString name="Source"><![CDATA[return {
	package = {
		authors = {"Stephen Leitnick"},
		description = "Signal class",
		exclude = {"node_modules", "package.json", "**/*.ts"},
		license = "MIT",
		name = "sleitnick/signal",
		realm = "shared",
		registry = "https://github.com/UpliftGames/wally-index",
		version = "2.0.1",
	},
}]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXEC1B22EB50B441D89245BE63ADDC7343">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">t</string>
					<string name="ScriptGuid">{D7E737C3-10A8-4B3C-8F8C-5DEA214D1ABF}</string>
					<ProtectedString name="Source"><![CDATA[return require(script.Parent._Index["osyrisrblx_t@3.0.0"]["t"])
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Script" referent="RBX3B765180D4FC4ECEB74E8523A0DFDD83">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Plugin</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{4974FF77-6E9C-4E88-B4C7-18D06CAC22A4}</string>
				<ProtectedString name="Source"><![CDATA[--[[
    blackferrari2's Session Tracker

    Version 1.3
    19th January 2024

    SOURCE:
    https://github.com/blackferrari2/session-tracker
]]

assert(plugin, "SessionTrack must run as a plugin NOW")

if game:GetService("RunService"):IsRunning() then
    return
end

local Session = require(script.Session)
local SessionStatus = require(script.Session.SessionStatus)
local Logger = require(script.Session.Logger)
local Autosave = require(script.Session.Autosave)
local Settings = require(script.Settings)
local Icons = require(script.Icons)

local pluginSettingsRoot = Settings.get()
local Info = pluginSettingsRoot and require(pluginSettingsRoot.Info)

---------------

if pluginSettingsRoot then
    local success, errorMessage = Settings.assert(pluginSettingsRoot)

    if not success then
        local toolbar = plugin:CreateToolbar("BrokenSessionTrack")

        local viewAssertionFailPageButton = toolbar:CreateButton(
            "what happened??",
            "you messed up...",
            Icons.AssertionFailPage
        )

        local function onViewPageClick()
            plugin:OpenScript(script.Settings.FailedAssertionLandingPage)
        end

        viewAssertionFailPageButton.Click:Connect(onViewPageClick)

        error(errorMessage)
    end
end

---------------

local toolbar = plugin:CreateToolbar("SessionTrack")

local powerButton = toolbar:CreateButton(
    "power",
    "turn bot on or off",
    Icons.Power.On
)

local pauseButton = toolbar:CreateButton(
    "pause",
    "pause or resume session",
    Icons.Pause.Unpaused
)

local settingsButton = toolbar:CreateButton(
    "settings",
    "open settings widget",
    Icons.Settings
)

local initializeButton = toolbar:CreateButton(
    "initialize",
    "create new settings",
    Icons.Initialize
)

--

local settingsButtonHeight = 40
local settingsWidget do
    local widgetInfo = DockWidgetPluginGuiInfo.new(
        Enum.InitialDockState.Float,
        false,
        true,
        settingsButtonHeight * 5,
        settingsButtonHeight * 5,
        settingsButtonHeight * 5,
        settingsButtonHeight * 5
    )

    settingsWidget = plugin:CreateDockWidgetPluginGui("SessionTrackSettings", widgetInfo)
    settingsWidget.Title = "select what you wanna edit"
end

local scroll = Instance.new("ScrollingFrame")

scroll.Size = UDim2.fromScale(1, 1)
scroll.Position = UDim2.fromScale(0, 0)
scroll.BackgroundColor3 = Color3.new(0, 0, 0)
scroll.Parent = settingsWidget

local UIListLayout = Instance.new("UIListLayout")

UIListLayout.Parent = scroll

local function updateSettingsWidget(modules)
    for _, module in pairs(modules) do
        -- replace old button
        local oldButton = scroll:FindFirstChild(module.Name)
        
        if oldButton then
            oldButton:Destroy()
        end

        local openScriptButton = Instance.new("TextButton")

        openScriptButton.Text = module.Name
        openScriptButton.Name = module.Name
        openScriptButton.Size = UDim2.new(UDim.new(1, 0), UDim.new(0, settingsButtonHeight))
        openScriptButton.Font = Enum.Font.Arcade
        openScriptButton.TextSize = settingsButtonHeight - 15
        openScriptButton.TextStrokeTransparency = 0
        openScriptButton.TextColor3 = Color3.new(1, 1, 1)
        openScriptButton.BackgroundColor3 = Color3.new(0, 0, 0)
        openScriptButton.Parent = scroll
    end
end

---------------

pauseButton.Enabled = false

if not pluginSettingsRoot then
    settingsButton.Enabled = false
    powerButton.Enabled = false
else
    initializeButton.Enabled = false
end

---------------

local currentSession
local autosave

function onPowerOnClick()
    Icons.changeIconSafely(powerButton, Icons.Power.Off)
    pauseButton.Enabled = true

    currentSession = Session.new()
    autosave = Autosave.new(plugin, Info.ProjectName)

    local currentSessionStatus = currentSession.status
    local recoveredSessionStatus = autosave:recover()
    local logger = Logger.new(pluginSettingsRoot, currentSessionStatus)

    if recoveredSessionStatus and recoveredSessionStatus.state == SessionStatus.States.Paused then
        Icons.changeIconSafely(pauseButton, Icons.Pause.Paused)
    end

    currentSessionStatus.stateChanged:Connect(function()
        autosave:update(currentSessionStatus)
    end)

    currentSession:begin(logger, recoveredSessionStatus)
    autosave:loop(currentSessionStatus)
end

function onPowerOffClick()
    Icons.changeIconSafely(powerButton, Icons.Power.On)
    Icons.changeIconSafely(pauseButton, Icons.Pause.Unpaused)
    pauseButton.Enabled = false

    Info.addToTotalProjectTime(currentSession.status:getTimeElapsed())
    autosave:erase()
    currentSession:close()
    currentSession = nil
end

powerButton.Click:Connect(function()
    powerButton.Enabled = false

    if currentSession then
        onPowerOffClick()
        powerButton.Enabled = true
        return
    end

    onPowerOnClick()
    powerButton.Enabled = true
end)

if pluginSettingsRoot and Autosave.new(plugin, Info.ProjectName):recover() then
    Icons.changeIconSafely(powerButton, Icons.Power.Recover)
end

--

function onPauseClick()
    currentSession:pause()
    Icons.changeIconSafely(pauseButton, Icons.Pause.Paused)
end

function onResumeClick()
    currentSession:resume()
    Icons.changeIconSafely(pauseButton, Icons.Pause.Unpaused)
end

pauseButton.Click:Connect(function()
    if not currentSession then
        return
    end

    pauseButton.Enabled = false

    if currentSession.status.state == SessionStatus.States.Paused then
        onResumeClick()
        pauseButton.Enabled = true
        return
    end

    onPauseClick()
    pauseButton.Enabled = true
end)

--

function setupSettingsButtonEvents(modules)
    for _, module in pairs(modules) do
        local openScriptButton = scroll:FindFirstChild(module.Name)
    
        openScriptButton.Activated:Connect(function()
            plugin:OpenScript(module)
        end)
    end
end

function onSettingsClick()
    local modules = pluginSettingsRoot:GetChildren()

    updateSettingsWidget(modules)
    setupSettingsButtonEvents(modules)

    settingsWidget.Enabled = not settingsWidget.Enabled
end

settingsButton.Click:Connect(onSettingsClick)

--

function onInitializeclick()
    settingsButton.Enabled = true
    initializeButton.Enabled = false

    pluginSettingsRoot = Settings.new()
    plugin:OpenScript(pluginSettingsRoot.Info)
end

initializeButton.Click:Connect(function()
    if pluginSettingsRoot then
        return
    end

    onInitializeclick()
end)
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXB9E947DF71DD43A09798F484B044D603">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Icons</string>
					<string name="ScriptGuid">{2D26F36F-5817-42DF-AF12-74E22BF54FF2}</string>
					<ProtectedString name="Source"><![CDATA[local Icons = {
    Power = {
        On = "http://www.roblox.com/asset/?id=16008923978",
        Off = "http://www.roblox.com/asset/?id=16008923312",
        Recover = "http://www.roblox.com/asset/?id=16025418149",
    },

    Pause = {
        Paused = "http://www.roblox.com/asset/?id=16008921548",
        Unpaused = "http://www.roblox.com/asset/?id=16008922394",
    },

    Settings = "http://www.roblox.com/asset/?id=16008920257",
    Initialize = "http://www.roblox.com/asset/?id=16008985266",
    AssertionFailPage = "http://www.roblox.com/asset/?id=14219067357",
}

---------------

-- theres this weird bug where if you change the .Icon id to the same one its already using, the icon turns invisible
function Icons.changeIconSafely(of: PluginToolbarButton, to: string)
    if of.Icon == to then
        return
    end

    of.Icon = to
end

---------------

return Icons]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXDDD0581F5A384896BA7A808306F7575A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Session</string>
					<string name="ScriptGuid">{4D1275C3-5DC8-423D-9E9D-CE3309C8CB1A}</string>
					<ProtectedString name="Source"><![CDATA[local SessionStatus = require(script.SessionStatus)
local Logger = require(script.Logger)

local Session = {}
Session.__index = Session

---------------

type self = {
    status: SessionStatus.SessionStatus,
    logger: Logger.Logger,
}

export type Session = typeof(setmetatable({} :: self, Session))

-------------

function Session.new(): Session
    local self = {
        status = SessionStatus.new(),
        logger = nil,
    }

    setmetatable(self, Session)

    return self
end

function Session.begin(self: Session, logger: Logger.Logger, recoveredSessionStatus: SessionStatus.SessionStatus?)
    if self.status.state ~= SessionStatus.States.DidntStart then
        return
    end

    self.logger = logger
    self.status:changeState(SessionStatus.States.Ongoing)

    if recoveredSessionStatus then
        self.status.state = recoveredSessionStatus.state
        self.status.timePassed = recoveredSessionStatus.timePassed
        self.status.timeStarted = recoveredSessionStatus.timeStarted
        logger:onSessionRecovered()
    else
        logger:start()
    end

    if self.status.state ~= SessionStatus.States.Paused then
        logger:loopCheckpointPosting()
    end
end

function Session.pause(self: Session)
    if self.status.state ~= SessionStatus.States.Ongoing then
        return
    end

    self.status:changeState(SessionStatus.States.Paused)
    self.logger:stopLoop()
    self.logger:pause()
end

function Session.resume(self: Session)
    if self.status.state ~= SessionStatus.States.Paused then
        return
    end

    self.status:changeState(SessionStatus.States.Ongoing)
    self.logger:resume()
    self.logger:loopCheckpointPosting()
end

function Session.close(self: Session)
    self.status:changeState(SessionStatus.States.Closed)
    self.logger:stopLoop()
    self.logger:close()
end

---------------

return Session]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX3E72D6E4422D4081B03A2629CF8261C8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Autosave</string>
						<string name="ScriptGuid">{65C23A95-73B3-482F-8E87-E7C131BC2790}</string>
						<ProtectedString name="Source"><![CDATA[local SessionStatus = require(script.Parent.SessionStatus)

local Autosave = {
    Key = "SessionTrackAutosave%s",
    IntervalSeconds = 5,
}

Autosave.__index = Autosave

---------------

type self = {
    plugin: Plugin,
    projectName: string,
    loopThread: thread,
}

export type Autosave = typeof(setmetatable({} :: self, Autosave))

-------------

local function getKey(projectName)
    return string.format(Autosave.Key, projectName)
end

-------------

function Autosave.new(plugin: Plugin, projectName: string): Autosave
    local self = {
        plugin = plugin,
        projectName = projectName,
        loopThread = nil,
    }

    setmetatable(self, Autosave)

    return self
end

function Autosave.update(self: Autosave, sessionStatus: SessionStatus.SessionStatus)
    -- the .stateChanged signal cant be saved by the plugin. itll throw an error
    local statusWithoutSignal = SessionStatus.new()

    statusWithoutSignal.state = sessionStatus.state
    statusWithoutSignal.timeStarted = sessionStatus.timeStarted
    statusWithoutSignal.timePassed = sessionStatus.timePassed
    statusWithoutSignal.stateChanged:DisconnectAll()
    statusWithoutSignal.stateChanged = nil

    self.plugin:SetSetting(getKey(self.projectName), statusWithoutSignal)
end

function Autosave.erase(self: Autosave)
    self:stop()
    self.plugin:SetSetting(getKey(self.projectName), nil)
end

function Autosave.recover(self: Autosave): SessionStatus.SessionStatus?
    return self.plugin:GetSetting(getKey(self.projectName))
end

function Autosave.loop(self: Autosave, sessionStatus: SessionStatus.SessionStatus)
    if self.loopThread then
        return
    end

    self.loopThread = task.spawn(function()
        self:update(sessionStatus)
    end)
end

function Autosave.stop(self: Autosave)
    if not self.loopThread then
        return
    end

    task.cancel(self.loopThread)
end

---------------

return Autosave]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX852D0F60D23F4077813C13AF6F77FAAB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Logger</string>
						<string name="ScriptGuid">{99D5EDB5-3523-49D2-8A5A-102574EC2F53}</string>
						<ProtectedString name="Source"><![CDATA[local packages = script.Parent.Parent.Parent.Packages
local baseModules = script.Parent.Parent.Settings.Modules

local Messages = require(baseModules.Messages)
local Checkpoints = require(baseModules.Checkpoints)
local Info = require(baseModules.Info)

local Voyager = require(packages.Voyager)
local Settings = require(script.Parent.Parent.Settings)
local SessionStatus = require(script.Parent.SessionStatus)

local Logger = {
    Tags = {
        DayToday = "TODAYSDATE",
        SessionTime = "SESSIONTIME",
        TotalTime = "TOTALTIME",
        RawSessionTime = "RAWSESSIONTIME",
        RawTotalTime = "RAWTOTALTIME",
        SessionState = "SESSIONSTATE",
    }
}

Logger.__index = Logger

---------------

type self = {
    settingsRoot: Settings.Settings,
    messages: Messages.Messages,
    checkpoints: Checkpoints.Checkpoints,
    info: Info.Info,
    webhook: any,
    sessionStatus: SessionStatus.SessionStatus,
    loopThread: thread?,
}

export type Logger = typeof(setmetatable({} :: self, Logger))

-------------

local function formatSecondsToHMS(time)
    local seconds = math.floor(time % 60)
    local minutes = math.floor(time / 60) % 60
    local hours = math.floor(time / 3600) % 24

    return string.format("%s Hours, %s Minutes and %s Seconds", hours, minutes, seconds)
end

local function formatSecondsToDHMS(time)
    local seconds = math.floor(time % 60)
    local minutes = math.floor(time / 60) % 60
    local hours = math.floor(time / 3600) % 24
    local days = math.floor(time / 86400)

    return string.format("%s Days, %s Hours, %s Minutes and %s Seconds", days, hours, minutes, seconds)
end

-------------

function Logger.new(settingsRoot: Settings.Settings, sessionStatus: SessionStatus.SessionStatus): Logger
    local self = {
        settingsRoot = settingsRoot,
        messages = require(settingsRoot.Messages),
        checkpoints = require(settingsRoot.Checkpoints),
        info = require(settingsRoot.Info),
        sessionStatus = sessionStatus,
        loopThread = nil,
    }

    self.webhook = Voyager.fromUrl(self.info.WebhookURL)

    setmetatable(self, Logger)

    return self
end

function Logger.start(self: Logger)
    local message = self.messages.get(self.messages.Start)
    local separator = self.messages.get(self.messages.LineSeparators)

    self:post(message)
    self:post(separator)
end

function Logger.onSessionRecovered(self: Logger)
    local message = self.messages.get(self.messages.SessionRecovered)
    
    self:post(message)
end

function Logger.postCheckpoint(self: Logger)
    local checkpoint = self.checkpoints.get()
        
    self:post(checkpoint)
end

function Logger.loopCheckpointPosting(self: Logger)
    if self.loopThread then
        return
    end

    local function loop()
        local interval = self.checkpoints.IntervalSeconds

        while task.wait(interval) do
            self:postCheckpoint()
        end
    end

    self.loopThread = task.spawn(loop)
end

function Logger.stopLoop(self: Logger)
    if self.loopThread then
        task.cancel(self.loopThread)
        self.loopThread = nil 
    end
end

function Logger.pause(self: Logger)
    local message = self.messages.get(self.messages.Pause)

    self:post(message)
end

function Logger.resume(self: Logger)
    local message = self.messages.get(self.messages.Resume)
    
    self:post(message)
end

function Logger.close(self: Logger)
    local separator = self.messages.get(self.messages.LineSeparators)
    local message = self.messages.get(self.messages.Close)

   self:post(separator)
   self:post(message)
end

--

-- non-message methods

function Logger.post(self: Logger, text: string)
    if self.isFaulty then
        return
    end

    text = self:getTextWithTagsApplied(text)

    self.webhook:execute(text, nil, true, true)
end

function Logger.getTextWithTagsApplied(self: Logger, text: string?): string?
    if not text then
        return
    end

    local tagApplications = {
        [Logger.Tags.DayToday] = os.date(),
        [Logger.Tags.SessionTime] = formatSecondsToHMS(self.sessionStatus:getTimeElapsed()),
        [Logger.Tags.TotalTime] = formatSecondsToDHMS(self.info.getTotalProjectTime()),
        [Logger.Tags.RawSessionTime] = self.sessionStatus:getTimeElapsed(),
        [Logger.Tags.RawTotalTime] = self.info.getTotalProjectTime(),
        [Logger.Tags.SessionState] = self.sessionStatus.state,
    }
    
    return string.gsub(text, "%u+", tagApplications)
end

---------------

return Logger]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX1C0E186D878640DA880DFD49758DB9B6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SessionStatus</string>
						<string name="ScriptGuid">{B9F90FDB-7911-4118-AA04-9031C2A737DB}</string>
						<ProtectedString name="Source"><![CDATA[local packages = script.Parent.Parent.Parent.Packages

local Signal = require(packages.Signal)

local SessionStatus = {
    States = {
        DidntStart = "DidntStart",
        Ongoing = "Ongoing",
        Paused = "Paused",
        Closed = "Closed",
    },
}

SessionStatus.__index = SessionStatus

---------------

type self = {
    state: State,
    stateChanged: Signal.Signal<State>,
    timePassed: number,
    timeStarted: number,
}

export type State = "DidntStart" | "Ongoing" | "Paused" | "Closed"
export type SessionStatus = typeof(setmetatable({} :: self, SessionStatus))

-------------

function SessionStatus.new(): SessionStatus
    local self = {
        state = SessionStatus.States.DidntStart,
        stateChanged = Signal.new(),
        timePassed = 0,
        timeStarted = nil,
    }

    setmetatable(self, SessionStatus)

    return self
end

function SessionStatus.changeState(self: SessionStatus, to: State)
    if to == SessionStatus.States.Ongoing then
        self.timeStarted = tick()
    end

    if to == SessionStatus.States.Paused or to == SessionStatus.States.Closed then
        self.timePassed = self:getTimeElapsed()
    end

    if to == SessionStatus.States.Closed then
        self.stateChanged:Destroy()
    end

    self.state = to
    self.stateChanged:Fire(to)
end

function SessionStatus.getTimeElapsed(self: SessionStatus)
    if self.state == SessionStatus.States.Paused or self.state == SessionStatus.States.Closed then
        return self.timePassed
    end

    local timeElapsedSoFar = tick() - self.timeStarted

    return self.timePassed + timeElapsedSoFar
end

---------------

return SessionStatus]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX8FF3CB9B83F24EE28E6F47B55E3A28C3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Settings</string>
					<string name="ScriptGuid">{83B5E5BB-3F2B-4EE8-9BCD-0E1FF9FB4860}</string>
					<ProtectedString name="Source"><![CDATA[local ServerStorage = game:GetService("ServerStorage")

local baseModules = script.Modules
local assertions = script.Assertions

local Messages = require(baseModules.Messages)
local Checkpoints = require(baseModules.Checkpoints)
local Info = require(baseModules.Info)

local Settings = {
    Version = 1,
    InstanceName = "SessionTrack.PluginSettings",
    OutdatedInstanceName = "[OUTDATED] SessionTrack.PluginSettings",
    VersionAttribute = "Version",
}

---------------

export type Settings = Folder & {
    Messages: Messages.Messages,
    Checkpoints: Checkpoints.Checkpoints,
    Info: Info.Info,
}

---------------

local PRINT_NEW_SETTINGS = "[SessionTrack]: created new settings folder!"
local WARN_OUTDATED_SETTINGS = "[SessionTrack]: your settings are outdated. please migrate your stuff over to a new copy. the old copy was renamed and you can still view it - its in ServerStorage"
local ASSERTFAIL_INVALID_INSTANCE = "[SessionTrack]: %s found in settings folder. ModuleScripts ONLY please"
local ASSERTFAIL_INVALID_NAME = "[SessionTrack]: the module name of %s is invalid. Please change it back to its original name (either that or its not a module found in the original settings.)"
local ASSERTFAIL_CANT_LOAD_MODULE = "[SessionTrack]: couldnt load settings module %s. %s"

---------------

function Settings.new(): Folder
    local clone = baseModules:Clone()

    clone.Name = Settings.InstanceName
    clone:SetAttribute(Settings.VersionAttribute, Settings.Version)
    clone.Parent = ServerStorage

    print(PRINT_NEW_SETTINGS)

    return clone
end

function Settings.get(): Folder?
    local modules = ServerStorage:FindFirstChild(Settings.InstanceName)

    if modules then
        if modules:GetAttribute(Settings.VersionAttribute) ~= Settings.Version then
            warn(WARN_OUTDATED_SETTINGS)

            modules.Name = Settings.OutdatedInstanceName

            return nil
        end

        return modules
    end

    return nil
end

function Settings.assert(root: Settings): (boolean, string?)
    for _, module in pairs(root:GetChildren()) do
        if module.ClassName ~= "ModuleScript" then
            return false, string.format(ASSERTFAIL_INVALID_INSTANCE, module.ClassName)
        end

        local assertion = assertions:FindFirstChild(module.Name)

        if not assertion then
            return false, string.format(ASSERTFAIL_INVALID_NAME, module.Name)
        end

        local loadedModule
        local _, errorMessage = pcall(function() 
            loadedModule = require(module)
        end)

        if errorMessage then
            return false, string.format(ASSERTFAIL_CANT_LOAD_MODULE, module.Name, errorMessage)
        end

        assertion = require(assertion)

        local moduleChecksPassed, moduleErrorMessage = assertion.run(loadedModule)

        if not moduleChecksPassed then
            return moduleChecksPassed, moduleErrorMessage
        end
    end

    return true
end

---------------

return Settings]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Folder" referent="RBX1F8A22C55BCF48C992BEF9873FAAAB68">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">Assertions</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX2725B02A45C84F8185B91AD68087C355">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Assets</string>
							<string name="ScriptGuid">{01C9A669-8C08-46C0-8C23-76FA8D290359}</string>
							<ProtectedString name="Source"><![CDATA[-- nothing to check lol

local AssetsAssertion = {}

---------------

function AssetsAssertion.run(): boolean
    return true
end

---------------

return AssetsAssertion]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX6907FD3BA8654261A4BDE9F6E0C17110">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Checkpoints</string>
							<string name="ScriptGuid">{CBCF17AE-3FA5-44D2-8D1B-F550E2B1926B}</string>
							<ProtectedString name="Source"><![CDATA[local packages = script.Parent.Parent.Parent.Parent.Packages
local baseModules = script.Parent.Parent.Modules

local t = require(packages.t)
local Checkpoints = require(baseModules.Checkpoints)

local CheckpointsAssertion = {}

---------------

local ASSERTFAIL_PREFIX = "[SessionTrack]: CHECKPOINTS FAILED TO LOAD - "

local checkpointInterface = t.interface({
    author = t.string,
    message = t.string,
})

local moduleInterface = t.interface({
    IntervalSeconds = t.numberMin(60),
})

---------------

function CheckpointsAssertion.run(module: Checkpoints.Checkpoints): (boolean, string?)
    local success, errorMessage = moduleInterface(module)

    if not success then
        return success, ASSERTFAIL_PREFIX .. errorMessage
    end

    for _, checkpoint in ipairs(module) do
        success, errorMessage = checkpointInterface(checkpoint)

        if not success then
            return success, ASSERTFAIL_PREFIX .. "checkpoints arent structured correctly. Did you mess with the .add() function? | " .. errorMessage
        end
    end

    local checkpoint
    success, errorMessage = pcall(function()
        checkpoint = module.get()
    end)

    if not success then
        return success, ASSERTFAIL_PREFIX .. errorMessage
    end

    success, errorMessage = t.optional(t.string)(checkpoint)

    if not success then
        return success, ASSERTFAIL_PREFIX .. "checkpoints.get() dont return text for some reason. What did you DO? | " .. errorMessage
    end

    return true
end

---------------

return CheckpointsAssertion]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX4A369357E0AA424F947EB9002BEDBA2C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Info</string>
							<string name="ScriptGuid">{06CB0454-1E45-468E-8FB2-EB12652F3572}</string>
							<ProtectedString name="Source"><![CDATA[local packages = script.Parent.Parent.Parent.Parent.Packages
local baseModules = script.Parent.Parent.Modules

local t = require(packages.t)
local Voyager = require(packages.Voyager)
local Info = require(baseModules.Info)

local InfoAssertion = {}

---------------

local ASSERTFAIL_PREFIX = "[SessionTrack]: INFO FAILED TO LOAD - "

local moduleInterface = t.interface({
    ProjectName = t.string,
    WebhookURL = t.string,
    UseOutputInstead = t.boolean,
    TotalProjectTimeAttribute = t.string,
})

---------------

function InfoAssertion.run(module: Info.Info): (boolean, string?)
    local success, errorMessage = moduleInterface(module)

    if not success then
        return success, ASSERTFAIL_PREFIX .. errorMessage
    end

    success, errorMessage = pcall(function()
        local webhook = Voyager.fromUrl(module.WebhookURL)
        local message, requestStatus = webhook:execute("Plugin is starting... (This is a check to see if the webhook actually works). Message will be deleted.", nil, false, true)

        if not requestStatus.success then
            error("Webhook fails to send messages. Proxy request status and code: " .. requestStatus.statusMessage .. " " .. requestStatus.statusCode)
        else
            webhook:deleteMessage(message.id)
        end
    end)

    if not success then
        return success, ASSERTFAIL_PREFIX .. errorMessage
    end

    local totalProjectTime
    success, errorMessage = pcall(function()
        totalProjectTime = module.getTotalProjectTime()
    end)

    if not success then
        return success, ASSERTFAIL_PREFIX .. "getTotalProjectTime is erroring. What?"
    end

    success, errorMessage = t.number(totalProjectTime)

    if not success then
        return success, ASSERTFAIL_PREFIX .. "getTotalProjectTime doesnt return a number. | " .. errorMessage
    end

    success, errorMessage = pcall(function()
        module.addToTotalProjectTime(1)
    end)

    if not success then
        return success, ASSERTFAIL_PREFIX .. errorMessage
    end

    local newTotalProjectTime = module.getTotalProjectTime()

    success, errorMessage = t.literal(totalProjectTime + 1)(newTotalProjectTime)

    if not success then
        return success, ASSERTFAIL_PREFIX .. "addToTotalProjectTime is inaccurate. You know what you did. Theres no way a normal person would get this error"
    end

    module.addToTotalProjectTime(-1)

    return true
end

---------------

return InfoAssertion]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXD2392E97CA964AF39234B67DD12D2840">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Messages</string>
							<string name="ScriptGuid">{B9E0D9E1-E1B8-4F2A-99CD-BE9AE6E08056}</string>
							<ProtectedString name="Source"><![CDATA[local packages = script.Parent.Parent.Parent.Parent.Packages
local baseModules = script.Parent.Parent.Modules

local t = require(packages.t)
local Messages = require(baseModules.Messages)

local MessagesAssertion = {}

---------------

local ASSERTFAIL_PREFIX = "[SessionTrack]: MESSAGES FAILED TO LOAD - "

local messageList = t.array(t.string)

local moduleInterface = t.interface({
    Start = messageList,
    SessionRecovered = messageList,
    Close = messageList,
    Pause = messageList,
    Resume = messageList,
    LineSeparators = messageList,
})

---------------

function MessagesAssertion.run(module: Messages.Messages): (boolean, string?)
    local success, errorMessage = moduleInterface(module)

    if not success then
        return success, ASSERTFAIL_PREFIX .. "the module isnt structured correctly. Did you mess with the .add() function? | " .. errorMessage
    end

    local message
    success, errorMessage = pcall(function()
        message = module.get(Messages.Start)
    end)

    if not success then
        return success, ASSERTFAIL_PREFIX .. errorMessage
    end

    success, errorMessage = t.optional(t.string)(message)

    if not success then
        return success, ASSERTFAIL_PREFIX .. "messages arent text for some reason. What did you DO? | " .. errorMessage
    end

    return true
end

---------------

return MessagesAssertion]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBX18F9F62976604717ABD55A2A83907693">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">FailedAssertionLandingPage</string>
						<string name="ScriptGuid">{87D0CE68-BB13-43ED-BFA8-BC06280E5AB9}</string>
						<ProtectedString name="Source"><![CDATA[--[[
                       ██████   ██████  ██████  ███████          
                      ██    ██ ██    ██ ██   ██ ██               
                      ██    ██ ██    ██ ██████  ███████          
                      ██    ██ ██    ██ ██           ██          
                       ██████   ██████  ██      ███████ ██ ██ ██ 
                            
                       
    ...........

    WHAT DID YOU DO???
        If you can see this page then your settings are setup incorrectly.

    Check your output (View > Output) for the error info
        FYI, your settings folder is located in ServerStorage, under the name "SessionTrack.PluginSettings"

    ...........

    Once the issue is fixed, save and reload studio to apply your new settings!
]]]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBXA46EA11595B2404A818CF1E4EC5A9E9C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">Modules</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBXF5A7FFA7EC6940268407D9FFBFAC78CE">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Assets</string>
							<string name="ScriptGuid">{45FF8C6F-A2AD-41DB-AF75-1C20864355C5}</string>
							<ProtectedString name="Source"><![CDATA[--[[
    NOTE:

    SAVE AND RESTART STUDIO TO APPLY CHANGES.
]]

--[[
    plugin assets

    not used for anything in particular other than to spice up messages and checkpoints. Feel free to do anything with this
]]

local Assets = {
    Emojis = {
        Smiley = "🙂",
        Angry = "😡",
        Rat = "🐀",
    },
}

---------------

return Assets]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX4F764FA539F3416BA553A2D4FFF646D1">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Checkpoints</string>
							<string name="ScriptGuid">{0484686B-BD86-4693-B05E-0C7FC15E20D0}</string>
							<ProtectedString name="Source"><![CDATA[--[[
    NOTE:

    SAVE AND RESTART STUDIO TO APPLY CHANGES.
]]

--[[
    Checkpoints are random messages that are sent during a session.

    scroll down
    ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓
]]

local Assets = require(script.Parent.Assets)

local Checkpoints = {
    -- Minimum value: 60 seconds
    IntervalSeconds = 600,
}

---------------

export type Checkpoints = typeof(Checkpoints)

---------------

local FORMAT = "[%s]: %s"

---------------

function Checkpoints.add(author: string, message: string)
    local checkpoint = {
        author = author,
        message = message
    }

    table.insert(Checkpoints, checkpoint)
end

function Checkpoints.get(): string?
    if #Checkpoints < 1 then
        return nil
    end

    local randomCheckpoint = math.random(1, #Checkpoints)
    local checkpoint = Checkpoints[randomCheckpoint]

    return string.format(FORMAT, checkpoint.author, checkpoint.message)
end

---------------

--[[
    ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ 
    ADD MORE CHECKPOINTS HERE
    ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ 

    If you dont want checkpoints to be sent, do not add any.

    Example:
        Checkpoints.add("TestAuthor", "hey")
]]

--[[
    SPECIAL TAGS
    spice up your checkpoints with them

    ...

    SESSIONTIME
        time spent on the current session

    TOTALTIME
        total time spent on the project

    TODAYSDATE
        day, hour, minute, second at the moment of starting the session

    RAWSESSIONTIME
        SESSIONTIME, in pure seconds

    RAWTOTALTIME
        TOTALTIME, in pure seconds

    SESSIONSTATE
        state of the session (paused or ongoing)

    ...
]]

Checkpoints.add("TestAuthor", "hey" .. Assets.Emojis.Smiley)
Checkpoints.add("TestAuthor2", "helolo SESSIONTIME")

---------------

return Checkpoints]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX8DCB69FD8EFE48B1B9A14A649C734120">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Info</string>
							<string name="ScriptGuid">{AE30153E-1DDB-436D-A581-04B075F53493}</string>
							<ProtectedString name="Source"><![CDATA[--[[
    ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★

    HELLO! thanks for using my plugin

    FOR IT TO WORK, first replace the `WebhookURL` field down there with the url of your discord webhook

    save and restart studio afterwards to apply the changes. Enjoy!
        (you can close this after youre done)


    ...........

    QnA:
        Reset/Delete settings?
            > delete/take out the `SessionTrack.PluginSettings` folder from ServerStorage and save and restart studio afterwards like normal.

        settings are GONE?
            > your settings mightve been outdated (check the output to confirm that and for more instructions). They werent deleted.


    ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★  ★ 
]]

--[[
    info about your project

    please edit the fields with "REPLACEME" for the plugin to work properly. dont worry about the other fields like `TotalProjectTime` :P

    if you wanna test the plugin without posting to the webhook, change the `UseOutputInstead` option to `true`.
        thatll, like the name says, send all the messages to roblox studios output
            set it back to `false` once youre done
]]

local Info = {
    ProjectName = "REPLACEME",
    WebhookURL = "REPLACEME",
    UseOutputInstead = false,
    TotalProjectTimeAttribute = "TotalProjectTime",
}

---------------

export type Info = typeof(Info)

---------------

function Info.addToTotalProjectTime(time: number)
    local currentAmount = script:GetAttribute(Info.TotalProjectTimeAttribute) or 0

    script:SetAttribute(Info.TotalProjectTimeAttribute, currentAmount + time)
end

function Info.getTotalProjectTime()
    return script:GetAttribute(Info.TotalProjectTimeAttribute) or 0
end

---------------

return Info]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX8F857EF267D3438CA98A18BFAE0D5DC0">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Messages</string>
							<string name="ScriptGuid">{84FD6915-B9C0-4EFA-9F5D-D75E16052C71}</string>
							<ProtectedString name="Source"><![CDATA[--[[
    NOTE:

    SAVE AND RESTART STUDIO TO APPLY CHANGES.
]]

--[[
    These are the special messages sent upon starting / ending / pausing a session.

    scroll down
    ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓
]]

local Assets = require(script.Parent.Assets)
local Info = require(script.Parent.Info)

local Messages = {
    Start = {},
    SessionRecovered = {},
    Close = {},
    Pause = {},
    Resume = {},
    LineSeparators = {},
}

---------------

export type MessageList = {string}
export type Messages = typeof(Messages)

---------------

function Messages.add(to: MessageList, text: string)
    table.insert(to, text)
end

function Messages.get(from: MessageList): string?
    if #from < 1 then
        return nil
    end

    local randomMessage = math.random(1, #from)

    return from[randomMessage]
end

---------------

--[[
    ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ 
    ADD MORE MESSAGES HERE
    ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ ☆ 

    If you dont want special messages to be sent, dont add them.
        this applies to all the specific categories too
            dont want "Close" messages? remove all the `Messages.add(Messages.Close)` lines

    Example:
        Messages.add(Messages.Start, "hello world!")

        to add a message to the session start
]]

--[[
    SPECIAL TAGS
    spice up your messages with them

    ...

    SESSIONTIME
        time spent on the current session

    TOTALTIME
        total time spent on the project

    TODAYSDATE
        day, hour, minute, second at the moment of starting the session

    RAWSESSIONTIME
        SESSIONTIME, in pure seconds

    RAWTOTALTIME
        TOTALTIME, in pure seconds

    SESSIONSTATE
        state of the session (paused or ongoing)

    ...
]]

Messages.add(Messages.Start, "Session Started! TODAYSDATE " .. Assets.Emojis.Rat)
Messages.add(Messages.Start, Info.ProjectName .. " Session Started... TODAYSDATE yay" .. Assets.Emojis.Angry)

Messages.add(Messages.SessionRecovered, "Session Recovered! state: SESSIONSTATE time rn: SESSIONTIME")
Messages.add(Messages.SessionRecovered, "im so glad you remembered to bring me back! SESSIONSTATE Session recovered. SESSIONTIME")

Messages.add(Messages.Close, "Session Closed! total time ever: TOTALTIME")
Messages.add(Messages.Close, "Session Closed unfortunately. total time ever: TOTALTIME")

Messages.add(Messages.Pause, "paused.")
Messages.add(Messages.Pause, "pausedddddd")

Messages.add(Messages.Resume, "resumed")
Messages.add(Messages.Resume, "resumeddddddddddd12313213")

Messages.add(Messages.LineSeparators, "----------------")

---------------

return Messages]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>